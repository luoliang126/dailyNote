/** * Created by ly on 2017/5/2. *///插件封装(function($){    //选择器方法    //应用层使用时  eg: base.getId("username");    var base = {        getId:function(id){            return document.getElementById(id);        },        getClass:function(classSelect){            return document.getElementsByClassName(classSelect);        },        getTagName:function(tagName){            return document.getElementsByTagName(tagName);        }    };    window.base = base; //挂在window对象上    //弹窗组件说明：依赖库组件:jquery,bootstrap,FontAwesome图标库,layer弹窗组件    var Layer = function(config){        this.config = {            layerType:"alert", //弹窗的类型            width:"860",    //弹窗的宽高            height:"560",            title:"弹窗标题", //弹窗的标题            url:"",   //iframe加载时的路径            content:"",  //提示或弹框的内容            isBtn:false,   //是否出现，下方按钮组（默认不出现false，出现为true）            isDraggleAble:true,            btns:[],        //自定义下方按钮组的名称，个数，和回调函数            closeBtn: function () {  //右上角的关闭按钮,点击后的回调事件            },            sureBtn:function(){   //确定按钮，点击后的回调事件(但一般不建议这么操作,方法尽量在prototype中,用on的方法监听，再用fire的方法触发)            },            falseBtn:function(){  //取消按钮，点击后的回调事件            }        };        this.handlers = {}; //用于自定义事件        $.extend(this.config,config); //jquery的extend方法，用于耦合this.config和config        this.windowWidth = document.body.offsetWidth;        this.windowHeight = document.body.offsetHeight;        switch (this.config.layerType){            case "tips":                this.tips();                break;            case "alert":                this.shadeDiv = $("<div class='layer-shadow'></div>");  //弹窗遮罩层                this.outDiv = $("<div class='luoliangLayer' id='luoliangLayer'></div>"); //弹窗最外层div                this.alert();                break;        }    };    Layer.prototype = {        //提示性弹框，3s后自动消失        tips:function(){            var outDivForTips = $("<div class='luoliangTips' id='luoliangTips'></div>");            outDivForTips.html(this.config.content);            outDivForTips.appendTo($("body"));            setTimeout(function(){                outDivForTips.fadeOut(function(){                    outDivForTips.remove();                });            },3000)        },        // 一般弹框        alert:function(){            var divHeader = $("<div class='layerHeader'><i class='fa fa-tasks'></i><span id='layerTitle'> "+ this.config.title+ " </span></div>");            var divClose = $("<i class='layerCloseBtn fa fa-times' title='关闭'></i>")            var divBody = $("<div class='layerBody'></div>");            this.outDiv.css({                width:this.config.width,                height:this.config.height,                left:(this.windowWidth - this.config.width)/2,                top:(this.windowHeight - this.config.height)/2            });            if(this.config.content){                divBody.html(this.config.content);            }            if(this.config.url){                var iframeEle = $("<iframe class='layerIframe'></iframe>");                iframeEle.attr("src",this.config.url);                iframeEle.appendTo(divBody);            }            divClose.appendTo(divHeader);            divHeader.appendTo(this.outDiv);            divBody.appendTo(this.outDiv);            var that = this;  //this指向，方便调用            //页面是否可拖动            if(this.config.isDraggleAble){                divHeader.on("mousedown",function(e){                    var clickPositionX = e.pageX; //点击 "点" 距离屏幕左、上的距离                    var clickPositionY = e.pageY;                    var prePositionX = parseInt($("#luoliangLayer").css("left")); //点击时 this.outDiv距离屏幕左、上的距离                    var prePositionY = parseInt($("#luoliangLayer").css("top"));                    $(window).on("mousemove",function(e){                        var moveX = e.pageX - clickPositionX;                        var moveY = e.pageY - clickPositionY;                        $("#luoliangLayer").css({                            left:prePositionX + moveX,                            top:prePositionY + moveY                        })                    })                })                this.outDiv.on("mouseup",function(){                    $(window).unbind("mousemove");                })            }            //底部的按钮 "确定"，"取消"            if(this.config.isBtn){                var divBottom = $("<div class='divBottom'></div>");                var sureBtn = $("<a class='sureBtn'>确定</a>");                var falseBtn = $("<a class='falseBtn'>取消</a>");                sureBtn.appendTo(divBottom);                falseBtn.appendTo(divBottom);                divBottom.appendTo(this.outDiv);                divBody.css({                    width:this.config.width,                    height:this.config.height - 80                });                sureBtn.on("click",function(){                    that.fire("sure");                    that.config.sureBtn();  //执行用户所传递的确定事件                    that.closeBtn();  //关闭方法                });                falseBtn.on("click",function(){                    that.fire("false");                    that.config.falseBtn();  //执行应用程序客户定义的function                    that.closeBtn();  //关闭方法                })            }else{                divBody.css({                    width:this.config.width,                    height:this.config.height - 40                });            }            this.shadeDiv.appendTo($("body"));            this.outDiv.appendTo($("body"));            this.outDiv.fadeIn();            divClose.on("click",function(){                that.fire("close");                that.config.closeBtn();  //执行应用层的关闭事件                that.closeBtn();  //关闭方法            })        },        //关闭弹窗        closeBtn:function(){            this.shadeDiv.remove();            this.outDiv.remove();        },        //自定义事件:        // 1、监听从界面传过来的自定义事件类型eg：close，以及传递过来的function，应用层的function即界面逻辑需要的方法。        // 2、可以同时监听多个自定义事件。然后将该function放入handlers对象的type数组中。        // 3、什么时候执行呢？就看业务需要了，比如当我们在关闭按钮时执行，就放在divClose中        //监听自定义事件        on:function(type,handler){            if(typeof this.handlers[type] == "undefined"){                this.handlers[type] = [];   //此处不用this.handlers.type ?????            }            this.handlers[type].push(handler);        },        //执行自定义事件        fire:function(type,data){            if(this.handlers[type] instanceof Array){                var handlers = this.handlers[type];                for(var i=0;i<handlers.length;i++){                    handlers[i](data);                }            }        }    }    window.Layer = Layer; //暴露出去    //tab选项卡插件    var Tab = function(config,selectId){        var newConfig; //整合后的配制信息        //默认配制参数        this.config = {            eventType:"click", //定义事件类型            animate:"fade", //定义动画效果            invoke:"1",  //默认展示第几个            auto:"1"  //定义动画时间 0:不自动播放，1:默认自动播放（时长5000），传具体参数        }        if(config && config !=""){            newConfig = this.getConfig(config);        }else{        }        //绑定方法        $(selectId).find(".tab-nav-item").bind(this.config.eventType,function(){            $(this).addClass("tab-nav-active").siblings().removeClass("tab-nav-active");            var index = $(this).index();            $(".tab-content li").removeClass("tab-content-active").eq(index).fadeIn().siblings().fadeOut();        })        //自动播放效果        if(this.config.auto == "0"){        }else if(this.config.auto == "1"){            this.autoPlay("5000");        }else{            this.autoPlay();        }    };    Tab.prototype = {        //获取配制参数信息        getConfig:function(config){            return $.extend(this.config,config);  //jquery的$.extend扩展方法，把第二个参数中的属性和值往第一个参数中扩展，有就覆盖，没有就添加.        },        //自动播放(轮播)        autoPlay:function(setTime){            var totalTime;            if(setTime){                totalTime = setTime;            }else{                totalTime = this.config.auto;            };            var index = 0; //循环时间            var indexPic = 0 //循环图片            setInterval(function(){                ++index;                if(index*1000 == totalTime){                    if(indexPic <= $(".tab-content").find("li").length - 2){                        ++indexPic;                    }else{                        indexPic = 0;                    }                    $(".tab-nav li").eq(indexPic).addClass("tab-nav-active").siblings().removeClass("tab-nav-active");                    $(".tab-content li").eq(indexPic).fadeIn().siblings().fadeOut();                    index = 0;                }            },1000);        }    };    window.Tab = Tab;  //暴露出去})(jQuery);